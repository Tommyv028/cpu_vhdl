library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;

entity cpu is 
	port(
		data_in: in std_logic_vector (7 downto 0);
		control: in std_logic_vector (2 downto 0);
		salida: out std_logic_vector (7 downto 0));
end entity cpu;

architecture cpu of cpu is

type estado is(inicio, espera, escribir_ram, leer_ram);
signal estadoActual: estado := inicio;
signal estadoSiguiente: estado:= inicio;

signal en_ri, wr_ri, en_op1, wr_op1, en_op2, wr_op2,
		 en_resultado, wr_resultado, en_status, wr_status,
		 en_salida, wr_salida, en_pc, wr_pc, en_data, wr_data,
		 en_ram, wr_ram: std_logic:='0';
		 
signal in_op1, out_op1, in_op2, out_op2, 
		 in_resultado, out_resultado, in_status, out_status, 
		 out_ram, posicion_ram, in_pc, out_pc, in_ri, out_ri: std_logic_vector (7 downto 0);
		 
		 
alias clk: std_logic is control(0);
alias load: std_logic is control(1);
alias reset: std_logic is control(2);

component alu is
	port(
		clk: in std_logic:='0';
		carry,ov,zeta: out std_logic:='0';
		op1: in std_logic_vector (7 downto 0):="00000000";
		op2: in std_logic_vector(7 downto 0):="00000000";
		cod_op: in std_logic_vector(2 downto 0):="000";
		resultado: out std_logic_vector(7 downto 0):="00000000");
end component alu;
component registro8b is
	port(
		clk,en,wr: in std_logic:='0';
		data_in: in std_logic_vector (7 downto 0):="00000000";
		data_out: out std_logic_vector(7 downto 0):="00000000");
end component registro8b;
component memoria8b is
	port(
		clk,en,wr: in std_logic:='0';
		data_in: in std_logic_vector (7 downto 0):="00000000";
		data_out: out std_logic_vector(7 downto 0):="00000000";
		direcciones: in std_logic_vector (7 downto 0));
end component memoria8b;

begin

modulo_alu: alu port map(clk=>clk,
						resultado=>,
						op1=>, op2=>,
						cod_op=>, carry=> ,ov=> ,zeta=> );

r_operador1: registro8b port map (clk=>clk, en=>en_op1, wr=>wr_op1,
								   data_in=>,
									data_out=>);

r_operador2: registro8b port map (clk=>clk, en=>en_op2, wr=>wr_op2,
								   data_in=>,
									data_out=>);
									
r_resultado: registro8b port map (clk=>clk, en=>en_resultado, wr=>wr_resultado,
								   data_in=>,
									data_out=>);

r_status: registro8b port map (clk=>clk, en=>en_status, wr=>wr_status,
								   data_in=>,
									data_out=>);

r_salida: registro8b port map (clk=>clk, en=>en_salida, wr=>wr_salida,
								   data_in=>in_salida,
									data_out=>salida);

r_pc: registro8b port map (clk=>clk, en=>en_pc, wr=>wr_pc,
								   data_in=>in_pc,
									data_out=>out_pc);

r_ri: registro8b port map (clk=>clk, en=>en_ri, wr=>wr_ri,
								   data_in=>in_ri,
									data_out=>out_ri);

r_data: registro8b port map (clk=>clk, en=>en_data, wr=>wr_data,
								   data_in=>,
									data_out=>);

r_ram: memoria8b port map (clk=>clk, direcciones=>posicion_ram, en=>en_ram, wr=>wr_ram,
									data_in=>data_in,
									data_out=>out_ram);

logicaEstado: process (clk, posicion_ram)
begin
	if clk'event and clk='1' then
		if reset='0' then
			estadoSiguiente<=reset_pc;
		elsif estadoActual<=reset_pc then
			estadoSiguiente<=inicio;
		end if;
		
		if estadoActual<=inicio then
			estadoSiguiente<=espera;
		end if;
		
		if estadoActual<=espera then
			if load='1' then
				estadoSiguiente<=escribir_ram;
			else
				estadoSiguiente<=leer_ram;
			end if;
		end if;
		
		if estadoActual=escribir_ram then
			estadoSiguiente<=espera;
		end if;
		if estadoActual=leer_ram then
			estadoSiguiente<=espera;
		end if;
		
	end if;
end process logicaEstado;

logicaSalida: process (estadoActual)
begin
	case estadoActual is
		when inico=>
		when espera=>
			en_ri<='0';
			wr_ri<='0';
			en_salida<='0';
			wr_salida<='0';
			en_pc<='0';
			wr_pc<='0';
			en_data<='0';
			wr_data<='0';
			en_ram<='0';
			wr_ram<='0';
		when escribir_ram=>
			en_ram<='1';
			wr_ram<='1';
			en_pc<='1';
			wr_pc<='0';
			posicion_ram<=out_pc;
		when leer_ram>
			en_ram<='1';
			wr_ram<='0';
			en_salida<='1';
			wr_salida<='1';
			in_salida<=out_ram;
		when mostrar_salida;
			en_salida<='1';
			wr_salida<='0';
		when others=>
	end case;
end process logicaSalida;

end architecture cpu;